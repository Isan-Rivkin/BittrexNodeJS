/// <reference path="q.module.d.ts" />
export interface IList {
    forEach(op: () => void): void;
    toArray(): any[];
}
export interface INode {
    id: number;
}
export class Node implements INode {
    private _id;
    public id : number;
}
export class NodeList implements IList {
    private _nodes;
    private _length;
    public getNode(id: string): INode;
    public getNode(id: number): INode;
    public addNode(node: INode): void;
    public removeNode(node: INode): void;
    public forEach(op: (u: INode, list?: NodeList) => void): void;
    public toArray(): INode[];
    public length : number;
}
export class EdgeMap {
    public nodes: NodeList;
    private _edges;
    public setEdge(one: INode, two: INode, distance: number): void;
    public getEdge(one: INode, two: INode): number;
    public forEach(op: (u: INode, v: INode, distance: number) => void): void;
    constructor(nodes: NodeList);
}
export class DistanceResult {
    public distance: number;
    public via: INode;
    public toString(): string;
    constructor(distance: number, via: INode);
}
export class DistanceResultList {
    public destination: INode;
    private _distances;
    public forEach(op: (distance: number, id: number, iteration: number) => void): void;
    public getDistanceFrom(source: INode): DistanceResult;
    public copy(): DistanceResultList;
    public toString(): string;
    constructor(destination: INode);
}
export class Graph {
    public nodes: NodeList;
    public edges: EdgeMap;
    public addNode(node: INode): void;
    constructor(nodes: NodeList, edges: EdgeMap);
    private updatePaths(paths);
    private negativeCycleExists(paths);
    public getShortestPathsAsync(destination: INode): Qpromise;
    public getShortestPathsSync(destination: INode): DistanceResultList;
}
